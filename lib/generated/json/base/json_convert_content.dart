// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_report_project/model/analytics_entity_list/analytics_entity_filter_component_entity.dart';
import 'package:flutter_report_project/model/analytics_entity_list/analytics_entity_list_entity.dart';
import 'package:flutter_report_project/model/analytics_entity_list/analytics_entity_list_setting_options_entity.dart';
import 'package:flutter_report_project/model/analytics_entity_list/evaluate_list_entity.dart';
import 'package:flutter_report_project/model/analytics_entity_list/order_detail_entity.dart';
import 'package:flutter_report_project/model/analytics_entity_list/order_detail_setting_options_entity.dart';
import 'package:flutter_report_project/model/business_topic/edit/metrics_edit_info_entity.dart';
import 'package:flutter_report_project/model/business_topic/metrics_by_dim_rank_entity.dart';
import 'package:flutter_report_project/model/business_topic/metrics_card/module_group_metrics_entity.dart';
import 'package:flutter_report_project/model/business_topic/metrics_card/module_metrics_card_entity.dart';
import 'package:flutter_report_project/model/business_topic/metrics_card/module_metrics_entity.dart';
import 'package:flutter_report_project/model/business_topic/metrics_core_exception_entity.dart';
import 'package:flutter_report_project/model/business_topic/metrics_financial_metrics_logic_entity.dart';
import 'package:flutter_report_project/model/business_topic/topic_template_entity.dart';
import 'package:flutter_report_project/model/dining_table/dining_table_shops_template_entity.dart';
import 'package:flutter_report_project/model/location/location_module_entity.dart';
import 'package:flutter_report_project/model/login/login_area_code_entity.dart';
import 'package:flutter_report_project/model/setting/setting_user_config_entity.dart';
import 'package:flutter_report_project/model/store/store_entity.dart';
import 'package:flutter_report_project/model/store/store_pk/store_pk_entity.dart';
import 'package:flutter_report_project/model/store/store_pk/store_pk_table_entity.dart';
import 'package:flutter_report_project/model/target_manage/target_manage_config_entity.dart';
import 'package:flutter_report_project/model/target_manage/target_manage_edit_config_entity.dart';
import 'package:flutter_report_project/model/target_manage/target_manage_list_targets_entity.dart';
import 'package:flutter_report_project/model/target_manage/target_manage_overview_entity.dart';
import 'package:flutter_report_project/model/target_manage/target_manage_shops_entity.dart';
import 'package:flutter_report_project/model/user/user_info_entity.dart';
import 'package:flutter_report_project/utils/version_check/rs_app_version_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value, {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AnalyticsEntityFilterComponentEntity>[] is M) {
      return data
          .map<AnalyticsEntityFilterComponentEntity>(
              (Map<String, dynamic> e) => AnalyticsEntityFilterComponentEntity.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityFilterComponentFilters>[] is M) {
      return data
          .map<AnalyticsEntityFilterComponentFilters>(
              (Map<String, dynamic> e) => AnalyticsEntityFilterComponentFilters.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityFilterComponentFiltersOptions>[] is M) {
      return data
          .map<AnalyticsEntityFilterComponentFiltersOptions>(
              (Map<String, dynamic> e) => AnalyticsEntityFilterComponentFiltersOptions.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityFilterComponentOrderBy>[] is M) {
      return data
          .map<AnalyticsEntityFilterComponentOrderBy>(
              (Map<String, dynamic> e) => AnalyticsEntityFilterComponentOrderBy.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityListEntity>[] is M) {
      return data
          .map<AnalyticsEntityListEntity>((Map<String, dynamic> e) => AnalyticsEntityListEntity.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityListPage>[] is M) {
      return data.map<AnalyticsEntityListPage>((Map<String, dynamic> e) => AnalyticsEntityListPage.fromJson(e)).toList()
          as M;
    }
    if (<AnalyticsEntityListList>[] is M) {
      return data.map<AnalyticsEntityListList>((Map<String, dynamic> e) => AnalyticsEntityListList.fromJson(e)).toList()
          as M;
    }
    if (<AnalyticsEntityListListMetrics>[] is M) {
      return data
          .map<AnalyticsEntityListListMetrics>((Map<String, dynamic> e) => AnalyticsEntityListListMetrics.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityListListDims>[] is M) {
      return data
          .map<AnalyticsEntityListListDims>((Map<String, dynamic> e) => AnalyticsEntityListListDims.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityListListTags>[] is M) {
      return data
          .map<AnalyticsEntityListListTags>((Map<String, dynamic> e) => AnalyticsEntityListListTags.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityListNext>[] is M) {
      return data.map<AnalyticsEntityListNext>((Map<String, dynamic> e) => AnalyticsEntityListNext.fromJson(e)).toList()
          as M;
    }
    if (<AnalyticsEntityListNextFilterPassingInfo>[] is M) {
      return data
          .map<AnalyticsEntityListNextFilterPassingInfo>(
              (Map<String, dynamic> e) => AnalyticsEntityListNextFilterPassingInfo.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityListSettingOptionsEntity>[] is M) {
      return data
          .map<AnalyticsEntityListSettingOptionsEntity>(
              (Map<String, dynamic> e) => AnalyticsEntityListSettingOptionsEntity.fromJson(e))
          .toList() as M;
    }
    if (<AnalyticsEntityListSettingOptionsOptions>[] is M) {
      return data
          .map<AnalyticsEntityListSettingOptionsOptions>(
              (Map<String, dynamic> e) => AnalyticsEntityListSettingOptionsOptions.fromJson(e))
          .toList() as M;
    }
    if (<EvaluateListEntity>[] is M) {
      return data.map<EvaluateListEntity>((Map<String, dynamic> e) => EvaluateListEntity.fromJson(e)).toList() as M;
    }
    if (<EvaluateListPage>[] is M) {
      return data.map<EvaluateListPage>((Map<String, dynamic> e) => EvaluateListPage.fromJson(e)).toList() as M;
    }
    if (<EvaluateListList>[] is M) {
      return data.map<EvaluateListList>((Map<String, dynamic> e) => EvaluateListList.fromJson(e)).toList() as M;
    }
    if (<OrderDetailEntity>[] is M) {
      return data.map<OrderDetailEntity>((Map<String, dynamic> e) => OrderDetailEntity.fromJson(e)).toList() as M;
    }
    if (<OrderDetailDivs>[] is M) {
      return data.map<OrderDetailDivs>((Map<String, dynamic> e) => OrderDetailDivs.fromJson(e)).toList() as M;
    }
    if (<OrderDetailDivsTitle>[] is M) {
      return data.map<OrderDetailDivsTitle>((Map<String, dynamic> e) => OrderDetailDivsTitle.fromJson(e)).toList() as M;
    }
    if (<OrderDetailDivsRows>[] is M) {
      return data.map<OrderDetailDivsRows>((Map<String, dynamic> e) => OrderDetailDivsRows.fromJson(e)).toList() as M;
    }
    if (<OrderDetailDivsRowsColumns>[] is M) {
      return data
          .map<OrderDetailDivsRowsColumns>((Map<String, dynamic> e) => OrderDetailDivsRowsColumns.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailDivsRowsColumnsContent>[] is M) {
      return data
          .map<OrderDetailDivsRowsColumnsContent>(
              (Map<String, dynamic> e) => OrderDetailDivsRowsColumnsContent.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailDivsRowsColumnsTag>[] is M) {
      return data
          .map<OrderDetailDivsRowsColumnsTag>((Map<String, dynamic> e) => OrderDetailDivsRowsColumnsTag.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailDivsRowsColumnsRelatedInfo>[] is M) {
      return data
          .map<OrderDetailDivsRowsColumnsRelatedInfo>(
              (Map<String, dynamic> e) => OrderDetailDivsRowsColumnsRelatedInfo.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailDivsRowsColumnsFont>[] is M) {
      return data
          .map<OrderDetailDivsRowsColumnsFont>((Map<String, dynamic> e) => OrderDetailDivsRowsColumnsFont.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailDivsRowsColumnsBackground>[] is M) {
      return data
          .map<OrderDetailDivsRowsColumnsBackground>(
              (Map<String, dynamic> e) => OrderDetailDivsRowsColumnsBackground.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailDivsRowsColumnsPadding>[] is M) {
      return data
          .map<OrderDetailDivsRowsColumnsPadding>(
              (Map<String, dynamic> e) => OrderDetailDivsRowsColumnsPadding.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailSettingOptionsEntity>[] is M) {
      return data
          .map<OrderDetailSettingOptionsEntity>((Map<String, dynamic> e) => OrderDetailSettingOptionsEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderDetailSettingOptionsOptions>[] is M) {
      return data
          .map<OrderDetailSettingOptionsOptions>(
              (Map<String, dynamic> e) => OrderDetailSettingOptionsOptions.fromJson(e))
          .toList() as M;
    }
    if (<MetricsEditInfoEntity>[] is M) {
      return data.map<MetricsEditInfoEntity>((Map<String, dynamic> e) => MetricsEditInfoEntity.fromJson(e)).toList()
          as M;
    }
    if (<MetricsEditInfoMetricsCard>[] is M) {
      return data
          .map<MetricsEditInfoMetricsCard>((Map<String, dynamic> e) => MetricsEditInfoMetricsCard.fromJson(e))
          .toList() as M;
    }
    if (<MetricsEditInfoCardType>[] is M) {
      return data.map<MetricsEditInfoCardType>((Map<String, dynamic> e) => MetricsEditInfoCardType.fromJson(e)).toList()
          as M;
    }
    if (<MetricsEditInfoChartType>[] is M) {
      return data
          .map<MetricsEditInfoChartType>((Map<String, dynamic> e) => MetricsEditInfoChartType.fromJson(e))
          .toList() as M;
    }
    if (<MetricsEditInfoMetrics>[] is M) {
      return data.map<MetricsEditInfoMetrics>((Map<String, dynamic> e) => MetricsEditInfoMetrics.fromJson(e)).toList()
          as M;
    }
    if (<MetricsEditInfoCompareType>[] is M) {
      return data
          .map<MetricsEditInfoCompareType>((Map<String, dynamic> e) => MetricsEditInfoCompareType.fromJson(e))
          .toList() as M;
    }
    if (<MetricsEditInfoAdvancedInfo>[] is M) {
      return data
          .map<MetricsEditInfoAdvancedInfo>((Map<String, dynamic> e) => MetricsEditInfoAdvancedInfo.fromJson(e))
          .toList() as M;
    }
    if (<MetricsEditInfoMetricDimConfigurator>[] is M) {
      return data
          .map<MetricsEditInfoMetricDimConfigurator>(
              (Map<String, dynamic> e) => MetricsEditInfoMetricDimConfigurator.fromJson(e))
          .toList() as M;
    }
    if (<MetricsEditInfoDimMetricConfigurator>[] is M) {
      return data
          .map<MetricsEditInfoDimMetricConfigurator>(
              (Map<String, dynamic> e) => MetricsEditInfoDimMetricConfigurator.fromJson(e))
          .toList() as M;
    }
    if (<MetricsEditInfoDims>[] is M) {
      return data.map<MetricsEditInfoDims>((Map<String, dynamic> e) => MetricsEditInfoDims.fromJson(e)).toList() as M;
    }
    if (<MetricsEditInfoTabTemplate>[] is M) {
      return data
          .map<MetricsEditInfoTabTemplate>((Map<String, dynamic> e) => MetricsEditInfoTabTemplate.fromJson(e))
          .toList() as M;
    }
    if (<MetricsByDimRankEntity>[] is M) {
      return data.map<MetricsByDimRankEntity>((Map<String, dynamic> e) => MetricsByDimRankEntity.fromJson(e)).toList()
          as M;
    }
    if (<MetricsByDimRankPage>[] is M) {
      return data.map<MetricsByDimRankPage>((Map<String, dynamic> e) => MetricsByDimRankPage.fromJson(e)).toList() as M;
    }
    if (<MetricsByDimRankList>[] is M) {
      return data.map<MetricsByDimRankList>((Map<String, dynamic> e) => MetricsByDimRankList.fromJson(e)).toList() as M;
    }
    if (<ModuleGroupMetricsEntity>[] is M) {
      return data
          .map<ModuleGroupMetricsEntity>((Map<String, dynamic> e) => ModuleGroupMetricsEntity.fromJson(e))
          .toList() as M;
    }
    if (<ModuleGroupMetricsMetrics>[] is M) {
      return data
          .map<ModuleGroupMetricsMetrics>((Map<String, dynamic> e) => ModuleGroupMetricsMetrics.fromJson(e))
          .toList() as M;
    }
    if (<ModuleGroupMetricsReportData>[] is M) {
      return data
          .map<ModuleGroupMetricsReportData>((Map<String, dynamic> e) => ModuleGroupMetricsReportData.fromJson(e))
          .toList() as M;
    }
    if (<ModuleGroupMetricsReportDataRows>[] is M) {
      return data
          .map<ModuleGroupMetricsReportDataRows>(
              (Map<String, dynamic> e) => ModuleGroupMetricsReportDataRows.fromJson(e))
          .toList() as M;
    }
    if (<ModuleGroupMetricsReportDataRowsDims>[] is M) {
      return data
          .map<ModuleGroupMetricsReportDataRowsDims>(
              (Map<String, dynamic> e) => ModuleGroupMetricsReportDataRowsDims.fromJson(e))
          .toList() as M;
    }
    if (<ModuleGroupMetricsReportDataRowsMetrics>[] is M) {
      return data
          .map<ModuleGroupMetricsReportDataRowsMetrics>(
              (Map<String, dynamic> e) => ModuleGroupMetricsReportDataRowsMetrics.fromJson(e))
          .toList() as M;
    }
    if (<ModuleGroupMetricsReportDataPage>[] is M) {
      return data
          .map<ModuleGroupMetricsReportDataPage>(
              (Map<String, dynamic> e) => ModuleGroupMetricsReportDataPage.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardEntity>[] is M) {
      return data.map<ModuleMetricsCardEntity>((Map<String, dynamic> e) => ModuleMetricsCardEntity.fromJson(e)).toList()
          as M;
    }
    if (<ModuleMetricsCardMetrics>[] is M) {
      return data
          .map<ModuleMetricsCardMetrics>((Map<String, dynamic> e) => ModuleMetricsCardMetrics.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardChart>[] is M) {
      return data.map<ModuleMetricsCardChart>((Map<String, dynamic> e) => ModuleMetricsCardChart.fromJson(e)).toList()
          as M;
    }
    if (<ModuleMetricsCardChartAxisY>[] is M) {
      return data
          .map<ModuleMetricsCardChartAxisY>((Map<String, dynamic> e) => ModuleMetricsCardChartAxisY.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardChartAxisX>[] is M) {
      return data
          .map<ModuleMetricsCardChartAxisX>((Map<String, dynamic> e) => ModuleMetricsCardChartAxisX.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardTable>[] is M) {
      return data.map<ModuleMetricsCardTable>((Map<String, dynamic> e) => ModuleMetricsCardTable.fromJson(e)).toList()
          as M;
    }
    if (<ModuleMetricsCardTableHeader>[] is M) {
      return data
          .map<ModuleMetricsCardTableHeader>((Map<String, dynamic> e) => ModuleMetricsCardTableHeader.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardTableRowsSubElement>[] is M) {
      return data
          .map<ModuleMetricsCardTableRowsSubElement>(
              (Map<String, dynamic> e) => ModuleMetricsCardTableRowsSubElement.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardCompValue>[] is M) {
      return data
          .map<ModuleMetricsCardCompValue>((Map<String, dynamic> e) => ModuleMetricsCardCompValue.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardCompValueCompare>[] is M) {
      return data
          .map<ModuleMetricsCardCompValueCompare>(
              (Map<String, dynamic> e) => ModuleMetricsCardCompValueCompare.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardCompValueAchievement>[] is M) {
      return data
          .map<ModuleMetricsCardCompValueAchievement>(
              (Map<String, dynamic> e) => ModuleMetricsCardCompValueAchievement.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardDrillDownInfo>[] is M) {
      return data
          .map<ModuleMetricsCardDrillDownInfo>((Map<String, dynamic> e) => ModuleMetricsCardDrillDownInfo.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardDrillDownInfoFilter>[] is M) {
      return data
          .map<ModuleMetricsCardDrillDownInfoFilter>(
              (Map<String, dynamic> e) => ModuleMetricsCardDrillDownInfoFilter.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsCardDrillDownInfoParameters>[] is M) {
      return data
          .map<ModuleMetricsCardDrillDownInfoParameters>(
              (Map<String, dynamic> e) => ModuleMetricsCardDrillDownInfoParameters.fromJson(e))
          .toList() as M;
    }
    if (<ModuleMetricsEntity>[] is M) {
      return data.map<ModuleMetricsEntity>((Map<String, dynamic> e) => ModuleMetricsEntity.fromJson(e)).toList() as M;
    }
    if (<MetricsCoreExceptionEntity>[] is M) {
      return data
          .map<MetricsCoreExceptionEntity>((Map<String, dynamic> e) => MetricsCoreExceptionEntity.fromJson(e))
          .toList() as M;
    }
    if (<MetricsCoreExceptionPage>[] is M) {
      return data
          .map<MetricsCoreExceptionPage>((Map<String, dynamic> e) => MetricsCoreExceptionPage.fromJson(e))
          .toList() as M;
    }
    if (<MetricsCoreExceptionList>[] is M) {
      return data
          .map<MetricsCoreExceptionList>((Map<String, dynamic> e) => MetricsCoreExceptionList.fromJson(e))
          .toList() as M;
    }
    if (<MetricsFinancialMetricsLogicEntity>[] is M) {
      return data
          .map<MetricsFinancialMetricsLogicEntity>(
              (Map<String, dynamic> e) => MetricsFinancialMetricsLogicEntity.fromJson(e))
          .toList() as M;
    }
    if (<MetricsFinancialMetricsLogicPage>[] is M) {
      return data
          .map<MetricsFinancialMetricsLogicPage>(
              (Map<String, dynamic> e) => MetricsFinancialMetricsLogicPage.fromJson(e))
          .toList() as M;
    }
    if (<MetricsFinancialMetricsLogicList>[] is M) {
      return data
          .map<MetricsFinancialMetricsLogicList>(
              (Map<String, dynamic> e) => MetricsFinancialMetricsLogicList.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateEntity>[] is M) {
      return data.map<TopicTemplateEntity>((Map<String, dynamic> e) => TopicTemplateEntity.fromJson(e)).toList() as M;
    }
    if (<TopicTemplateTemplates>[] is M) {
      return data.map<TopicTemplateTemplates>((Map<String, dynamic> e) => TopicTemplateTemplates.fromJson(e)).toList()
          as M;
    }
    if (<TopicTemplateTemplatesNavs>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavs>((Map<String, dynamic> e) => TopicTemplateTemplatesNavs.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabs>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabs>((Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabs.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabsCards>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabsCards>(
              (Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabsCards.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabsConfig>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabsConfig>(
              (Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabsConfig.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabsCardsCardMetadata>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabsCardsCardMetadata>(
              (Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabsCardsCardMetadata.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabsCardsCardMetadataChartType>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabsCardsCardMetadataChartType>(
              (Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabsCardsCardMetadataChartType.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfo>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfo>(
              (Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfo.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfoMetrics>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfoMetrics>(
              (Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfoMetrics.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabsCardsCardMetadataMetrics>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabsCardsCardMetadataMetrics>(
              (Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabsCardsCardMetadataMetrics.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabsCardsCardMetadataMetricExplanation>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabsCardsCardMetadataMetricExplanation>(
              (Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabsCardsCardMetadataMetricExplanation.fromJson(e))
          .toList() as M;
    }
    if (<TopicTemplateTemplatesNavsTabsCardsCardMetadataDims>[] is M) {
      return data
          .map<TopicTemplateTemplatesNavsTabsCardsCardMetadataDims>(
              (Map<String, dynamic> e) => TopicTemplateTemplatesNavsTabsCardsCardMetadataDims.fromJson(e))
          .toList() as M;
    }
    if (<DiningTableShopsTemplateEntity>[] is M) {
      return data
          .map<DiningTableShopsTemplateEntity>((Map<String, dynamic> e) => DiningTableShopsTemplateEntity.fromJson(e))
          .toList() as M;
    }
    if (<DiningTableShopsTemplateCardMetadata>[] is M) {
      return data
          .map<DiningTableShopsTemplateCardMetadata>(
              (Map<String, dynamic> e) => DiningTableShopsTemplateCardMetadata.fromJson(e))
          .toList() as M;
    }
    if (<DiningTableShopsTemplateCardMetadataMetrics>[] is M) {
      return data
          .map<DiningTableShopsTemplateCardMetadataMetrics>(
              (Map<String, dynamic> e) => DiningTableShopsTemplateCardMetadataMetrics.fromJson(e))
          .toList() as M;
    }
    if (<DiningTableShopsTemplateCardMetadataDims>[] is M) {
      return data
          .map<DiningTableShopsTemplateCardMetadataDims>(
              (Map<String, dynamic> e) => DiningTableShopsTemplateCardMetadataDims.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleEntity>[] is M) {
      return data.map<LocationModuleEntity>((Map<String, dynamic> e) => LocationModuleEntity.fromJson(e)).toList() as M;
    }
    if (<LocationModuleShops>[] is M) {
      return data.map<LocationModuleShops>((Map<String, dynamic> e) => LocationModuleShops.fromJson(e)).toList() as M;
    }
    if (<LocationModuleCurrencyShops>[] is M) {
      return data
          .map<LocationModuleCurrencyShops>((Map<String, dynamic> e) => LocationModuleCurrencyShops.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleCurrencyShopsCurrency>[] is M) {
      return data
          .map<LocationModuleCurrencyShopsCurrency>(
              (Map<String, dynamic> e) => LocationModuleCurrencyShopsCurrency.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleBrandShops>[] is M) {
      return data
          .map<LocationModuleBrandShops>((Map<String, dynamic> e) => LocationModuleBrandShops.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleBrandShopsBrand>[] is M) {
      return data
          .map<LocationModuleBrandShopsBrand>((Map<String, dynamic> e) => LocationModuleBrandShopsBrand.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleBrandShopsCurrencyShops>[] is M) {
      return data
          .map<LocationModuleBrandShopsCurrencyShops>(
              (Map<String, dynamic> e) => LocationModuleBrandShopsCurrencyShops.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleBrandShopsCurrencyShopsCurrency>[] is M) {
      return data
          .map<LocationModuleBrandShopsCurrencyShopsCurrency>(
              (Map<String, dynamic> e) => LocationModuleBrandShopsCurrencyShopsCurrency.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleGroupShops>[] is M) {
      return data
          .map<LocationModuleGroupShops>((Map<String, dynamic> e) => LocationModuleGroupShops.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleGroupShopsShopGroup>[] is M) {
      return data
          .map<LocationModuleGroupShopsShopGroup>(
              (Map<String, dynamic> e) => LocationModuleGroupShopsShopGroup.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleGroupShopsCurrencyShops>[] is M) {
      return data
          .map<LocationModuleGroupShopsCurrencyShops>(
              (Map<String, dynamic> e) => LocationModuleGroupShopsCurrencyShops.fromJson(e))
          .toList() as M;
    }
    if (<LocationModuleGroupShopsCurrencyShopsCurrency>[] is M) {
      return data
          .map<LocationModuleGroupShopsCurrencyShopsCurrency>(
              (Map<String, dynamic> e) => LocationModuleGroupShopsCurrencyShopsCurrency.fromJson(e))
          .toList() as M;
    }
    if (<LoginAreaCodeEntity>[] is M) {
      return data.map<LoginAreaCodeEntity>((Map<String, dynamic> e) => LoginAreaCodeEntity.fromJson(e)).toList() as M;
    }
    if (<LoginAreaCodeAreaCodeList>[] is M) {
      return data
          .map<LoginAreaCodeAreaCodeList>((Map<String, dynamic> e) => LoginAreaCodeAreaCodeList.fromJson(e))
          .toList() as M;
    }
    if (<SettingUserConfigEntity>[] is M) {
      return data.map<SettingUserConfigEntity>((Map<String, dynamic> e) => SettingUserConfigEntity.fromJson(e)).toList()
          as M;
    }
    if (<SettingUserConfig>[] is M) {
      return data.map<SettingUserConfig>((Map<String, dynamic> e) => SettingUserConfig.fromJson(e)).toList() as M;
    }
    if (<SettingUserConfigOptions>[] is M) {
      return data
          .map<SettingUserConfigOptions>((Map<String, dynamic> e) => SettingUserConfigOptions.fromJson(e))
          .toList() as M;
    }
    if (<StoreEntity>[] is M) {
      return data.map<StoreEntity>((Map<String, dynamic> e) => StoreEntity.fromJson(e)).toList() as M;
    }
    if (<StoreShops>[] is M) {
      return data.map<StoreShops>((Map<String, dynamic> e) => StoreShops.fromJson(e)).toList() as M;
    }
    if (<StoreBrands>[] is M) {
      return data.map<StoreBrands>((Map<String, dynamic> e) => StoreBrands.fromJson(e)).toList() as M;
    }
    if (<StoreCurrencyShops>[] is M) {
      return data.map<StoreCurrencyShops>((Map<String, dynamic> e) => StoreCurrencyShops.fromJson(e)).toList() as M;
    }
    if (<StoreCurrencyShopsCurrency>[] is M) {
      return data
          .map<StoreCurrencyShopsCurrency>((Map<String, dynamic> e) => StoreCurrencyShopsCurrency.fromJson(e))
          .toList() as M;
    }
    if (<StoreCurrencyShopsGroupShops>[] is M) {
      return data
          .map<StoreCurrencyShopsGroupShops>((Map<String, dynamic> e) => StoreCurrencyShopsGroupShops.fromJson(e))
          .toList() as M;
    }
    if (<StoreCurrencyShopsGroupShopsShopGroup>[] is M) {
      return data
          .map<StoreCurrencyShopsGroupShopsShopGroup>(
              (Map<String, dynamic> e) => StoreCurrencyShopsGroupShopsShopGroup.fromJson(e))
          .toList() as M;
    }
    if (<StoreCurrencyShopsGroupShopsBrandShops>[] is M) {
      return data
          .map<StoreCurrencyShopsGroupShopsBrandShops>(
              (Map<String, dynamic> e) => StoreCurrencyShopsGroupShopsBrandShops.fromJson(e))
          .toList() as M;
    }
    if (<StorePKEntity>[] is M) {
      return data.map<StorePKEntity>((Map<String, dynamic> e) => StorePKEntity.fromJson(e)).toList() as M;
    }
    if (<StorePKCardMetadata>[] is M) {
      return data.map<StorePKCardMetadata>((Map<String, dynamic> e) => StorePKCardMetadata.fromJson(e)).toList() as M;
    }
    if (<StorePKCardMetadataCardGroup>[] is M) {
      return data
          .map<StorePKCardMetadataCardGroup>((Map<String, dynamic> e) => StorePKCardMetadataCardGroup.fromJson(e))
          .toList() as M;
    }
    if (<StorePKCardMetadataCardGroupMetadata>[] is M) {
      return data
          .map<StorePKCardMetadataCardGroupMetadata>(
              (Map<String, dynamic> e) => StorePKCardMetadataCardGroupMetadata.fromJson(e))
          .toList() as M;
    }
    if (<StorePKCardMetadataCardGroupMetadataMetrics>[] is M) {
      return data
          .map<StorePKCardMetadataCardGroupMetadataMetrics>(
              (Map<String, dynamic> e) => StorePKCardMetadataCardGroupMetadataMetrics.fromJson(e))
          .toList() as M;
    }
    if (<StorePKCardMetadataCardGroupMetadataDims>[] is M) {
      return data
          .map<StorePKCardMetadataCardGroupMetadataDims>(
              (Map<String, dynamic> e) => StorePKCardMetadataCardGroupMetadataDims.fromJson(e))
          .toList() as M;
    }
    if (<StorePKTableEntity>[] is M) {
      return data.map<StorePKTableEntity>((Map<String, dynamic> e) => StorePKTableEntity.fromJson(e)).toList() as M;
    }
    if (<StorePKTableEntityTable>[] is M) {
      return data.map<StorePKTableEntityTable>((Map<String, dynamic> e) => StorePKTableEntityTable.fromJson(e)).toList()
          as M;
    }
    if (<StorePKTableEntityTableHeader>[] is M) {
      return data
          .map<StorePKTableEntityTableHeader>((Map<String, dynamic> e) => StorePKTableEntityTableHeader.fromJson(e))
          .toList() as M;
    }
    if (<StorePKTableEntityTableRows>[] is M) {
      return data
          .map<StorePKTableEntityTableRows>((Map<String, dynamic> e) => StorePKTableEntityTableRows.fromJson(e))
          .toList() as M;
    }
    if (<StorePKTableEntityTableExtras>[] is M) {
      return data
          .map<StorePKTableEntityTableExtras>((Map<String, dynamic> e) => StorePKTableEntityTableExtras.fromJson(e))
          .toList() as M;
    }
    if (<StorePKTableEntityTableTotal>[] is M) {
      return data
          .map<StorePKTableEntityTableTotal>((Map<String, dynamic> e) => StorePKTableEntityTableTotal.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageConfigEntity>[] is M) {
      return data
          .map<TargetManageConfigEntity>((Map<String, dynamic> e) => TargetManageConfigEntity.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageConfigTitleMsg>[] is M) {
      return data
          .map<TargetManageConfigTitleMsg>((Map<String, dynamic> e) => TargetManageConfigTitleMsg.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageConfigFilterInfo>[] is M) {
      return data
          .map<TargetManageConfigFilterInfo>((Map<String, dynamic> e) => TargetManageConfigFilterInfo.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageConfigFilterInfoAchievementFilter>[] is M) {
      return data
          .map<TargetManageConfigFilterInfoAchievementFilter>(
              (Map<String, dynamic> e) => TargetManageConfigFilterInfoAchievementFilter.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageConfigFilterInfoAchievementFilterRule>[] is M) {
      return data
          .map<TargetManageConfigFilterInfoAchievementFilterRule>(
              (Map<String, dynamic> e) => TargetManageConfigFilterInfoAchievementFilterRule.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageConfigMetrics>[] is M) {
      return data
          .map<TargetManageConfigMetrics>((Map<String, dynamic> e) => TargetManageConfigMetrics.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageEditConfigEntity>[] is M) {
      return data
          .map<TargetManageEditConfigEntity>((Map<String, dynamic> e) => TargetManageEditConfigEntity.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageEditConfigMetrics>[] is M) {
      return data
          .map<TargetManageEditConfigMetrics>((Map<String, dynamic> e) => TargetManageEditConfigMetrics.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageListTargetsEntity>[] is M) {
      return data
          .map<TargetManageListTargetsEntity>((Map<String, dynamic> e) => TargetManageListTargetsEntity.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageListTargetsInfos>[] is M) {
      return data
          .map<TargetManageListTargetsInfos>((Map<String, dynamic> e) => TargetManageListTargetsInfos.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewEntity>[] is M) {
      return data
          .map<TargetManageOverviewEntity>((Map<String, dynamic> e) => TargetManageOverviewEntity.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewUnSetShopInfo>[] is M) {
      return data
          .map<TargetManageOverviewUnSetShopInfo>(
              (Map<String, dynamic> e) => TargetManageOverviewUnSetShopInfo.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewUnSetShopInfoShopInfos>[] is M) {
      return data
          .map<TargetManageOverviewUnSetShopInfoShopInfos>(
              (Map<String, dynamic> e) => TargetManageOverviewUnSetShopInfoShopInfos.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewSummary>[] is M) {
      return data
          .map<TargetManageOverviewSummary>((Map<String, dynamic> e) => TargetManageOverviewSummary.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewOverall>[] is M) {
      return data
          .map<TargetManageOverviewOverall>((Map<String, dynamic> e) => TargetManageOverviewOverall.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewOverallAchievementRate>[] is M) {
      return data
          .map<TargetManageOverviewOverallAchievementRate>(
              (Map<String, dynamic> e) => TargetManageOverviewOverallAchievementRate.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewOverallTarget>[] is M) {
      return data
          .map<TargetManageOverviewOverallTarget>(
              (Map<String, dynamic> e) => TargetManageOverviewOverallTarget.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewOverallAchieved>[] is M) {
      return data
          .map<TargetManageOverviewOverallAchieved>(
              (Map<String, dynamic> e) => TargetManageOverviewOverallAchieved.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewOverallNotAchieved>[] is M) {
      return data
          .map<TargetManageOverviewOverallNotAchieved>(
              (Map<String, dynamic> e) => TargetManageOverviewOverallNotAchieved.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewShopAchievement>[] is M) {
      return data
          .map<TargetManageOverviewShopAchievement>(
              (Map<String, dynamic> e) => TargetManageOverviewShopAchievement.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewShopAchievementMetrics>[] is M) {
      return data
          .map<TargetManageOverviewShopAchievementMetrics>(
              (Map<String, dynamic> e) => TargetManageOverviewShopAchievementMetrics.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewShopAchievementReportData>[] is M) {
      return data
          .map<TargetManageOverviewShopAchievementReportData>(
              (Map<String, dynamic> e) => TargetManageOverviewShopAchievementReportData.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewShopAchievementReportDataRows>[] is M) {
      return data
          .map<TargetManageOverviewShopAchievementReportDataRows>(
              (Map<String, dynamic> e) => TargetManageOverviewShopAchievementReportDataRows.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewShopAchievementReportDataRowsDims>[] is M) {
      return data
          .map<TargetManageOverviewShopAchievementReportDataRowsDims>(
              (Map<String, dynamic> e) => TargetManageOverviewShopAchievementReportDataRowsDims.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewShopAchievementReportDataRowsMetrics>[] is M) {
      return data
          .map<TargetManageOverviewShopAchievementReportDataRowsMetrics>(
              (Map<String, dynamic> e) => TargetManageOverviewShopAchievementReportDataRowsMetrics.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewShopAchievementDetail>[] is M) {
      return data
          .map<TargetManageOverviewShopAchievementDetail>(
              (Map<String, dynamic> e) => TargetManageOverviewShopAchievementDetail.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewCumulativeTrend>[] is M) {
      return data
          .map<TargetManageOverviewCumulativeTrend>(
              (Map<String, dynamic> e) => TargetManageOverviewCumulativeTrend.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewChart>[] is M) {
      return data
          .map<TargetManageOverviewChart>((Map<String, dynamic> e) => TargetManageOverviewChart.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewChartAxisY>[] is M) {
      return data
          .map<TargetManageOverviewChartAxisY>((Map<String, dynamic> e) => TargetManageOverviewChartAxisY.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewChartAxisCompY>[] is M) {
      return data
          .map<TargetManageOverviewChartAxisCompY>(
              (Map<String, dynamic> e) => TargetManageOverviewChartAxisCompY.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewChartAxisX>[] is M) {
      return data
          .map<TargetManageOverviewChartAxisX>((Map<String, dynamic> e) => TargetManageOverviewChartAxisX.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageOverviewDailyTrend>[] is M) {
      return data
          .map<TargetManageOverviewDailyTrend>((Map<String, dynamic> e) => TargetManageOverviewDailyTrend.fromJson(e))
          .toList() as M;
    }
    if (<TargetManageShopsEntity>[] is M) {
      return data.map<TargetManageShopsEntity>((Map<String, dynamic> e) => TargetManageShopsEntity.fromJson(e)).toList()
          as M;
    }
    if (<TargetManageShopsCurrencyShop>[] is M) {
      return data
          .map<TargetManageShopsCurrencyShop>((Map<String, dynamic> e) => TargetManageShopsCurrencyShop.fromJson(e))
          .toList() as M;
    }
    if (<UserInfoEntity>[] is M) {
      return data.map<UserInfoEntity>((Map<String, dynamic> e) => UserInfoEntity.fromJson(e)).toList() as M;
    }
    if (<UserInfoEmployeeList>[] is M) {
      return data.map<UserInfoEmployeeList>((Map<String, dynamic> e) => UserInfoEmployeeList.fromJson(e)).toList() as M;
    }
    if (<RSAppVersionEntity>[] is M) {
      return data.map<RSAppVersionEntity>((Map<String, dynamic> e) => RSAppVersionEntity.fromJson(e)).toList() as M;
    }
    if (<RSAppVersionVersions>[] is M) {
      return data.map<RSAppVersionVersions>((Map<String, dynamic> e) => RSAppVersionVersions.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AnalyticsEntityFilterComponentEntity).toString(): AnalyticsEntityFilterComponentEntity.fromJson,
    (AnalyticsEntityFilterComponentFilters).toString(): AnalyticsEntityFilterComponentFilters.fromJson,
    (AnalyticsEntityFilterComponentFiltersOptions).toString(): AnalyticsEntityFilterComponentFiltersOptions.fromJson,
    (AnalyticsEntityFilterComponentOrderBy).toString(): AnalyticsEntityFilterComponentOrderBy.fromJson,
    (AnalyticsEntityListEntity).toString(): AnalyticsEntityListEntity.fromJson,
    (AnalyticsEntityListPage).toString(): AnalyticsEntityListPage.fromJson,
    (AnalyticsEntityListList).toString(): AnalyticsEntityListList.fromJson,
    (AnalyticsEntityListListMetrics).toString(): AnalyticsEntityListListMetrics.fromJson,
    (AnalyticsEntityListListDims).toString(): AnalyticsEntityListListDims.fromJson,
    (AnalyticsEntityListListTags).toString(): AnalyticsEntityListListTags.fromJson,
    (AnalyticsEntityListNext).toString(): AnalyticsEntityListNext.fromJson,
    (AnalyticsEntityListNextFilterPassingInfo).toString(): AnalyticsEntityListNextFilterPassingInfo.fromJson,
    (AnalyticsEntityListSettingOptionsEntity).toString(): AnalyticsEntityListSettingOptionsEntity.fromJson,
    (AnalyticsEntityListSettingOptionsOptions).toString(): AnalyticsEntityListSettingOptionsOptions.fromJson,
    (EvaluateListEntity).toString(): EvaluateListEntity.fromJson,
    (EvaluateListPage).toString(): EvaluateListPage.fromJson,
    (EvaluateListList).toString(): EvaluateListList.fromJson,
    (OrderDetailEntity).toString(): OrderDetailEntity.fromJson,
    (OrderDetailDivs).toString(): OrderDetailDivs.fromJson,
    (OrderDetailDivsTitle).toString(): OrderDetailDivsTitle.fromJson,
    (OrderDetailDivsRows).toString(): OrderDetailDivsRows.fromJson,
    (OrderDetailDivsRowsColumns).toString(): OrderDetailDivsRowsColumns.fromJson,
    (OrderDetailDivsRowsColumnsContent).toString(): OrderDetailDivsRowsColumnsContent.fromJson,
    (OrderDetailDivsRowsColumnsTag).toString(): OrderDetailDivsRowsColumnsTag.fromJson,
    (OrderDetailDivsRowsColumnsRelatedInfo).toString(): OrderDetailDivsRowsColumnsRelatedInfo.fromJson,
    (OrderDetailDivsRowsColumnsFont).toString(): OrderDetailDivsRowsColumnsFont.fromJson,
    (OrderDetailDivsRowsColumnsBackground).toString(): OrderDetailDivsRowsColumnsBackground.fromJson,
    (OrderDetailDivsRowsColumnsPadding).toString(): OrderDetailDivsRowsColumnsPadding.fromJson,
    (OrderDetailSettingOptionsEntity).toString(): OrderDetailSettingOptionsEntity.fromJson,
    (OrderDetailSettingOptionsOptions).toString(): OrderDetailSettingOptionsOptions.fromJson,
    (MetricsEditInfoEntity).toString(): MetricsEditInfoEntity.fromJson,
    (MetricsEditInfoMetricsCard).toString(): MetricsEditInfoMetricsCard.fromJson,
    (MetricsEditInfoCardType).toString(): MetricsEditInfoCardType.fromJson,
    (MetricsEditInfoChartType).toString(): MetricsEditInfoChartType.fromJson,
    (MetricsEditInfoMetrics).toString(): MetricsEditInfoMetrics.fromJson,
    (MetricsEditInfoCompareType).toString(): MetricsEditInfoCompareType.fromJson,
    (MetricsEditInfoAdvancedInfo).toString(): MetricsEditInfoAdvancedInfo.fromJson,
    (MetricsEditInfoMetricDimConfigurator).toString(): MetricsEditInfoMetricDimConfigurator.fromJson,
    (MetricsEditInfoDimMetricConfigurator).toString(): MetricsEditInfoDimMetricConfigurator.fromJson,
    (MetricsEditInfoDims).toString(): MetricsEditInfoDims.fromJson,
    (MetricsEditInfoTabTemplate).toString(): MetricsEditInfoTabTemplate.fromJson,
    (MetricsByDimRankEntity).toString(): MetricsByDimRankEntity.fromJson,
    (MetricsByDimRankPage).toString(): MetricsByDimRankPage.fromJson,
    (MetricsByDimRankList).toString(): MetricsByDimRankList.fromJson,
    (ModuleGroupMetricsEntity).toString(): ModuleGroupMetricsEntity.fromJson,
    (ModuleGroupMetricsMetrics).toString(): ModuleGroupMetricsMetrics.fromJson,
    (ModuleGroupMetricsReportData).toString(): ModuleGroupMetricsReportData.fromJson,
    (ModuleGroupMetricsReportDataRows).toString(): ModuleGroupMetricsReportDataRows.fromJson,
    (ModuleGroupMetricsReportDataRowsDims).toString(): ModuleGroupMetricsReportDataRowsDims.fromJson,
    (ModuleGroupMetricsReportDataRowsMetrics).toString(): ModuleGroupMetricsReportDataRowsMetrics.fromJson,
    (ModuleGroupMetricsReportDataPage).toString(): ModuleGroupMetricsReportDataPage.fromJson,
    (ModuleMetricsCardEntity).toString(): ModuleMetricsCardEntity.fromJson,
    (ModuleMetricsCardMetrics).toString(): ModuleMetricsCardMetrics.fromJson,
    (ModuleMetricsCardChart).toString(): ModuleMetricsCardChart.fromJson,
    (ModuleMetricsCardChartAxisY).toString(): ModuleMetricsCardChartAxisY.fromJson,
    (ModuleMetricsCardChartAxisX).toString(): ModuleMetricsCardChartAxisX.fromJson,
    (ModuleMetricsCardTable).toString(): ModuleMetricsCardTable.fromJson,
    (ModuleMetricsCardTableHeader).toString(): ModuleMetricsCardTableHeader.fromJson,
    (ModuleMetricsCardTableRowsSubElement).toString(): ModuleMetricsCardTableRowsSubElement.fromJson,
    (ModuleMetricsCardCompValue).toString(): ModuleMetricsCardCompValue.fromJson,
    (ModuleMetricsCardCompValueCompare).toString(): ModuleMetricsCardCompValueCompare.fromJson,
    (ModuleMetricsCardCompValueAchievement).toString(): ModuleMetricsCardCompValueAchievement.fromJson,
    (ModuleMetricsCardDrillDownInfo).toString(): ModuleMetricsCardDrillDownInfo.fromJson,
    (ModuleMetricsCardDrillDownInfoFilter).toString(): ModuleMetricsCardDrillDownInfoFilter.fromJson,
    (ModuleMetricsCardDrillDownInfoParameters).toString(): ModuleMetricsCardDrillDownInfoParameters.fromJson,
    (ModuleMetricsEntity).toString(): ModuleMetricsEntity.fromJson,
    (MetricsCoreExceptionEntity).toString(): MetricsCoreExceptionEntity.fromJson,
    (MetricsCoreExceptionPage).toString(): MetricsCoreExceptionPage.fromJson,
    (MetricsCoreExceptionList).toString(): MetricsCoreExceptionList.fromJson,
    (MetricsFinancialMetricsLogicEntity).toString(): MetricsFinancialMetricsLogicEntity.fromJson,
    (MetricsFinancialMetricsLogicPage).toString(): MetricsFinancialMetricsLogicPage.fromJson,
    (MetricsFinancialMetricsLogicList).toString(): MetricsFinancialMetricsLogicList.fromJson,
    (TopicTemplateEntity).toString(): TopicTemplateEntity.fromJson,
    (TopicTemplateTemplates).toString(): TopicTemplateTemplates.fromJson,
    (TopicTemplateTemplatesNavs).toString(): TopicTemplateTemplatesNavs.fromJson,
    (TopicTemplateTemplatesNavsTabs).toString(): TopicTemplateTemplatesNavsTabs.fromJson,
    (TopicTemplateTemplatesNavsTabsCards).toString(): TopicTemplateTemplatesNavsTabsCards.fromJson,
    (TopicTemplateTemplatesNavsTabsConfig).toString(): TopicTemplateTemplatesNavsTabsConfig.fromJson,
    (TopicTemplateTemplatesNavsTabsCardsCardMetadata).toString():
        TopicTemplateTemplatesNavsTabsCardsCardMetadata.fromJson,
    (TopicTemplateTemplatesNavsTabsCardsCardMetadataChartType).toString():
        TopicTemplateTemplatesNavsTabsCardsCardMetadataChartType.fromJson,
    (TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfo).toString():
        TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfo.fromJson,
    (TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfoMetrics).toString():
        TopicTemplateTemplatesNavsTabsCardsCardMetadataCompareInfoMetrics.fromJson,
    (TopicTemplateTemplatesNavsTabsCardsCardMetadataMetrics).toString():
        TopicTemplateTemplatesNavsTabsCardsCardMetadataMetrics.fromJson,
    (TopicTemplateTemplatesNavsTabsCardsCardMetadataMetricExplanation).toString():
        TopicTemplateTemplatesNavsTabsCardsCardMetadataMetricExplanation.fromJson,
    (TopicTemplateTemplatesNavsTabsCardsCardMetadataDims).toString():
        TopicTemplateTemplatesNavsTabsCardsCardMetadataDims.fromJson,
    (DiningTableShopsTemplateEntity).toString(): DiningTableShopsTemplateEntity.fromJson,
    (DiningTableShopsTemplateCardMetadata).toString(): DiningTableShopsTemplateCardMetadata.fromJson,
    (DiningTableShopsTemplateCardMetadataMetrics).toString(): DiningTableShopsTemplateCardMetadataMetrics.fromJson,
    (DiningTableShopsTemplateCardMetadataDims).toString(): DiningTableShopsTemplateCardMetadataDims.fromJson,
    (LocationModuleEntity).toString(): LocationModuleEntity.fromJson,
    (LocationModuleShops).toString(): LocationModuleShops.fromJson,
    (LocationModuleCurrencyShops).toString(): LocationModuleCurrencyShops.fromJson,
    (LocationModuleCurrencyShopsCurrency).toString(): LocationModuleCurrencyShopsCurrency.fromJson,
    (LocationModuleBrandShops).toString(): LocationModuleBrandShops.fromJson,
    (LocationModuleBrandShopsBrand).toString(): LocationModuleBrandShopsBrand.fromJson,
    (LocationModuleBrandShopsCurrencyShops).toString(): LocationModuleBrandShopsCurrencyShops.fromJson,
    (LocationModuleBrandShopsCurrencyShopsCurrency).toString(): LocationModuleBrandShopsCurrencyShopsCurrency.fromJson,
    (LocationModuleGroupShops).toString(): LocationModuleGroupShops.fromJson,
    (LocationModuleGroupShopsShopGroup).toString(): LocationModuleGroupShopsShopGroup.fromJson,
    (LocationModuleGroupShopsCurrencyShops).toString(): LocationModuleGroupShopsCurrencyShops.fromJson,
    (LocationModuleGroupShopsCurrencyShopsCurrency).toString(): LocationModuleGroupShopsCurrencyShopsCurrency.fromJson,
    (LoginAreaCodeEntity).toString(): LoginAreaCodeEntity.fromJson,
    (LoginAreaCodeAreaCodeList).toString(): LoginAreaCodeAreaCodeList.fromJson,
    (SettingUserConfigEntity).toString(): SettingUserConfigEntity.fromJson,
    (SettingUserConfig).toString(): SettingUserConfig.fromJson,
    (SettingUserConfigOptions).toString(): SettingUserConfigOptions.fromJson,
    (StoreEntity).toString(): StoreEntity.fromJson,
    (StoreShops).toString(): StoreShops.fromJson,
    (StoreBrands).toString(): StoreBrands.fromJson,
    (StoreCurrencyShops).toString(): StoreCurrencyShops.fromJson,
    (StoreCurrencyShopsCurrency).toString(): StoreCurrencyShopsCurrency.fromJson,
    (StoreCurrencyShopsGroupShops).toString(): StoreCurrencyShopsGroupShops.fromJson,
    (StoreCurrencyShopsGroupShopsShopGroup).toString(): StoreCurrencyShopsGroupShopsShopGroup.fromJson,
    (StoreCurrencyShopsGroupShopsBrandShops).toString(): StoreCurrencyShopsGroupShopsBrandShops.fromJson,
    (StorePKEntity).toString(): StorePKEntity.fromJson,
    (StorePKCardMetadata).toString(): StorePKCardMetadata.fromJson,
    (StorePKCardMetadataCardGroup).toString(): StorePKCardMetadataCardGroup.fromJson,
    (StorePKCardMetadataCardGroupMetadata).toString(): StorePKCardMetadataCardGroupMetadata.fromJson,
    (StorePKCardMetadataCardGroupMetadataMetrics).toString(): StorePKCardMetadataCardGroupMetadataMetrics.fromJson,
    (StorePKCardMetadataCardGroupMetadataDims).toString(): StorePKCardMetadataCardGroupMetadataDims.fromJson,
    (StorePKTableEntity).toString(): StorePKTableEntity.fromJson,
    (StorePKTableEntityTable).toString(): StorePKTableEntityTable.fromJson,
    (StorePKTableEntityTableHeader).toString(): StorePKTableEntityTableHeader.fromJson,
    (StorePKTableEntityTableRows).toString(): StorePKTableEntityTableRows.fromJson,
    (StorePKTableEntityTableExtras).toString(): StorePKTableEntityTableExtras.fromJson,
    (StorePKTableEntityTableTotal).toString(): StorePKTableEntityTableTotal.fromJson,
    (TargetManageConfigEntity).toString(): TargetManageConfigEntity.fromJson,
    (TargetManageConfigTitleMsg).toString(): TargetManageConfigTitleMsg.fromJson,
    (TargetManageConfigFilterInfo).toString(): TargetManageConfigFilterInfo.fromJson,
    (TargetManageConfigFilterInfoAchievementFilter).toString(): TargetManageConfigFilterInfoAchievementFilter.fromJson,
    (TargetManageConfigFilterInfoAchievementFilterRule).toString():
        TargetManageConfigFilterInfoAchievementFilterRule.fromJson,
    (TargetManageConfigMetrics).toString(): TargetManageConfigMetrics.fromJson,
    (TargetManageEditConfigEntity).toString(): TargetManageEditConfigEntity.fromJson,
    (TargetManageEditConfigMetrics).toString(): TargetManageEditConfigMetrics.fromJson,
    (TargetManageListTargetsEntity).toString(): TargetManageListTargetsEntity.fromJson,
    (TargetManageListTargetsInfos).toString(): TargetManageListTargetsInfos.fromJson,
    (TargetManageOverviewEntity).toString(): TargetManageOverviewEntity.fromJson,
    (TargetManageOverviewUnSetShopInfo).toString(): TargetManageOverviewUnSetShopInfo.fromJson,
    (TargetManageOverviewUnSetShopInfoShopInfos).toString(): TargetManageOverviewUnSetShopInfoShopInfos.fromJson,
    (TargetManageOverviewSummary).toString(): TargetManageOverviewSummary.fromJson,
    (TargetManageOverviewOverall).toString(): TargetManageOverviewOverall.fromJson,
    (TargetManageOverviewOverallAchievementRate).toString(): TargetManageOverviewOverallAchievementRate.fromJson,
    (TargetManageOverviewOverallTarget).toString(): TargetManageOverviewOverallTarget.fromJson,
    (TargetManageOverviewOverallAchieved).toString(): TargetManageOverviewOverallAchieved.fromJson,
    (TargetManageOverviewOverallNotAchieved).toString(): TargetManageOverviewOverallNotAchieved.fromJson,
    (TargetManageOverviewShopAchievement).toString(): TargetManageOverviewShopAchievement.fromJson,
    (TargetManageOverviewShopAchievementMetrics).toString(): TargetManageOverviewShopAchievementMetrics.fromJson,
    (TargetManageOverviewShopAchievementReportData).toString(): TargetManageOverviewShopAchievementReportData.fromJson,
    (TargetManageOverviewShopAchievementReportDataRows).toString():
        TargetManageOverviewShopAchievementReportDataRows.fromJson,
    (TargetManageOverviewShopAchievementReportDataRowsDims).toString():
        TargetManageOverviewShopAchievementReportDataRowsDims.fromJson,
    (TargetManageOverviewShopAchievementReportDataRowsMetrics).toString():
        TargetManageOverviewShopAchievementReportDataRowsMetrics.fromJson,
    (TargetManageOverviewShopAchievementDetail).toString(): TargetManageOverviewShopAchievementDetail.fromJson,
    (TargetManageOverviewCumulativeTrend).toString(): TargetManageOverviewCumulativeTrend.fromJson,
    (TargetManageOverviewChart).toString(): TargetManageOverviewChart.fromJson,
    (TargetManageOverviewChartAxisY).toString(): TargetManageOverviewChartAxisY.fromJson,
    (TargetManageOverviewChartAxisCompY).toString(): TargetManageOverviewChartAxisCompY.fromJson,
    (TargetManageOverviewChartAxisX).toString(): TargetManageOverviewChartAxisX.fromJson,
    (TargetManageOverviewDailyTrend).toString(): TargetManageOverviewDailyTrend.fromJson,
    (TargetManageShopsEntity).toString(): TargetManageShopsEntity.fromJson,
    (TargetManageShopsCurrencyShop).toString(): TargetManageShopsCurrencyShop.fromJson,
    (UserInfoEntity).toString(): UserInfoEntity.fromJson,
    (UserInfoEmployeeList).toString(): UserInfoEmployeeList.fromJson,
    (RSAppVersionEntity).toString(): RSAppVersionEntity.fromJson,
    (RSAppVersionVersions).toString(): RSAppVersionVersions.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
