// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library ai.restosuite.curiosity.guardian.protocol;

import 'dart:typed_data' show Uint8List;

import 'package:flat_buffers/flat_buffers.dart' as fb;

class UploadDataType {
  final int value;
  const UploadDataType._(this.value);

  factory UploadDataType.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum UploadDataType');
    }
    return result;
  }

  static UploadDataType? _createOrNull(int? value) => value == null ? null : UploadDataType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static bool containsValue(int value) => values.containsKey(value);

  static const UploadDataType Other = UploadDataType._(0);
  static const UploadDataType Logs = UploadDataType._(1);
  static const UploadDataType Metrics = UploadDataType._(2);
  static const UploadDataType Traces = UploadDataType._(3);
  static const UploadDataType Config = UploadDataType._(4);
  static const Map<int, UploadDataType> values = {0: Other, 1: Logs, 2: Metrics, 3: Traces, 4: Config};

  static const fb.Reader<UploadDataType> reader = _UploadDataTypeReader();

  @override
  String toString() {
    return 'UploadDataType{value: $value}';
  }
}

class _UploadDataTypeReader extends fb.Reader<UploadDataType> {
  const _UploadDataTypeReader();

  @override
  int get size => 1;

  @override
  UploadDataType read(fb.BufferContext bc, int offset) =>
      UploadDataType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class UploadResponseStatus {
  final int value;
  const UploadResponseStatus._(this.value);

  factory UploadResponseStatus.fromValue(int value) {
    final result = values[value];
    if (result == null) {
      throw StateError('Invalid value $value for bit flag enum UploadResponseStatus');
    }
    return result;
  }

  static UploadResponseStatus? _createOrNull(int? value) =>
      value == null ? null : UploadResponseStatus.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 6;
  static bool containsValue(int value) => values.containsKey(value);

  static const UploadResponseStatus Other = UploadResponseStatus._(0);
  static const UploadResponseStatus Success = UploadResponseStatus._(1);
  static const UploadResponseStatus Failure = UploadResponseStatus._(2);
  static const UploadResponseStatus UploadingTooFrequently = UploadResponseStatus._(3);
  static const UploadResponseStatus DisableUpload = UploadResponseStatus._(4);
  static const UploadResponseStatus EnableUpload = UploadResponseStatus._(5);
  static const UploadResponseStatus Config = UploadResponseStatus._(6);
  static const Map<int, UploadResponseStatus> values = {
    0: Other,
    1: Success,
    2: Failure,
    3: UploadingTooFrequently,
    4: DisableUpload,
    5: EnableUpload,
    6: Config
  };

  static const fb.Reader<UploadResponseStatus> reader = _UploadResponseStatusReader();

  @override
  String toString() {
    return 'UploadResponseStatus{value: $value}';
  }
}

class _UploadResponseStatusReader extends fb.Reader<UploadResponseStatus> {
  const _UploadResponseStatusReader();

  @override
  int get size => 1;

  @override
  UploadResponseStatus read(fb.BufferContext bc, int offset) =>
      UploadResponseStatus.fromValue(const fb.Int8Reader().read(bc, offset));
}

class UploadRawData {
  UploadRawData._(this._bc, this._bcOffset);
  factory UploadRawData(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UploadRawData> reader = _UploadRawDataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get rawData => const fb.Int8ListReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'UploadRawData{rawData: ${rawData}}';
  }
}

class _UploadRawDataReader extends fb.TableReader<UploadRawData> {
  const _UploadRawDataReader();

  @override
  UploadRawData createObject(fb.BufferContext bc, int offset) => UploadRawData._(bc, offset);
}

class UploadRawDataBuilder {
  UploadRawDataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRawDataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UploadRawDataObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _rawData;

  UploadRawDataObjectBuilder({
    List<int>? rawData,
  }) : _rawData = rawData;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rawDataOffset = _rawData == null ? null : fbBuilder.writeListInt8(_rawData!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, rawDataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class UploadRawDataSegment {
  UploadRawDataSegment._(this._bc, this._bcOffset);
  factory UploadRawDataSegment(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UploadRawDataSegment> reader = _UploadRawDataSegmentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  UploadDataType get dataType => UploadDataType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  List<UploadRawData>? get dataSegment =>
      const fb.ListReader<UploadRawData>(UploadRawData.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'UploadRawDataSegment{dataType: ${dataType}, dataSegment: ${dataSegment}}';
  }
}

class _UploadRawDataSegmentReader extends fb.TableReader<UploadRawDataSegment> {
  const _UploadRawDataSegmentReader();

  @override
  UploadRawDataSegment createObject(fb.BufferContext bc, int offset) => UploadRawDataSegment._(bc, offset);
}

class UploadRawDataSegmentBuilder {
  UploadRawDataSegmentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addDataType(UploadDataType? dataType) {
    fbBuilder.addInt8(0, 1);
    return fbBuilder.offset;
  }

  int addDataSegmentOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UploadRawDataSegmentObjectBuilder extends fb.ObjectBuilder {
  final UploadDataType? _dataType;
  final List<UploadRawDataObjectBuilder>? _dataSegment;

  UploadRawDataSegmentObjectBuilder({
    UploadDataType? dataType,
    List<UploadRawDataObjectBuilder>? dataSegment,
  })  : _dataType = dataType,
        _dataSegment = dataSegment;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dataSegmentOffset = _dataSegment == null
        ? null
        : fbBuilder.writeList(_dataSegment!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addInt8(0, _dataType?.value);
    fbBuilder.addOffset(1, dataSegmentOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class GuardianMeta {
  GuardianMeta._(this._bc, this._bcOffset);
  factory GuardianMeta(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GuardianMeta> reader = _GuardianMetaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get guardianId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get instrumentId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get instrumentName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get businessId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  int get configVersion => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);

  @override
  String toString() {
    return 'GuardianMeta{guardianId: ${guardianId}, instrumentId: ${instrumentId}, instrumentName: ${instrumentName}, businessId: ${businessId}, configVersion: ${configVersion}}';
  }
}

class _GuardianMetaReader extends fb.TableReader<GuardianMeta> {
  const _GuardianMetaReader();

  @override
  GuardianMeta createObject(fb.BufferContext bc, int offset) => GuardianMeta._(bc, offset);
}

class GuardianMetaBuilder {
  GuardianMetaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addGuardianIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addInstrumentIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addInstrumentNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addBusinessIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int addConfigVersion(int? configVersion) {
    fbBuilder.addInt32(4, configVersion);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GuardianMetaObjectBuilder extends fb.ObjectBuilder {
  final String? _guardianId;
  final String? _instrumentId;
  final String? _instrumentName;
  final String? _businessId;
  final int? _configVersion;

  GuardianMetaObjectBuilder({
    String? guardianId,
    String? instrumentId,
    String? instrumentName,
    String? businessId,
    int? configVersion,
  })  : _guardianId = guardianId,
        _instrumentId = instrumentId,
        _instrumentName = instrumentName,
        _businessId = businessId,
        _configVersion = configVersion;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? guardianIdOffset = _guardianId == null ? null : fbBuilder.writeString(_guardianId!);
    final int? instrumentIdOffset = _instrumentId == null ? null : fbBuilder.writeString(_instrumentId!);
    final int? instrumentNameOffset = _instrumentName == null ? null : fbBuilder.writeString(_instrumentName!);
    final int? businessIdOffset = _businessId == null ? null : fbBuilder.writeString(_businessId!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, guardianIdOffset);
    fbBuilder.addOffset(1, instrumentIdOffset);
    fbBuilder.addOffset(2, instrumentNameOffset);
    fbBuilder.addOffset(3, businessIdOffset);
    fbBuilder.addInt32(4, _configVersion);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class UploadDataRequest {
  UploadDataRequest._(this._bc, this._bcOffset);
  factory UploadDataRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UploadDataRequest> reader = _UploadDataRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get uploadTimestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<int>? get extraMeta => const fb.Int8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<UploadRawDataSegment>? get allDataSegment =>
      const fb.ListReader<UploadRawDataSegment>(UploadRawDataSegment.reader).vTableGetNullable(_bc, _bcOffset, 8);
  GuardianMeta? get guardianMeta => GuardianMeta.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'UploadDataRequest{uploadTimestamp: ${uploadTimestamp}, extraMeta: ${extraMeta}, allDataSegment: ${allDataSegment}, guardianMeta: ${guardianMeta}}';
  }
}

class _UploadDataRequestReader extends fb.TableReader<UploadDataRequest> {
  const _UploadDataRequestReader();

  @override
  UploadDataRequest createObject(fb.BufferContext bc, int offset) => UploadDataRequest._(bc, offset);
}

class UploadDataRequestBuilder {
  UploadDataRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addUploadTimestamp(int? uploadTimestamp) {
    fbBuilder.addInt64(0, uploadTimestamp);
    return fbBuilder.offset;
  }

  int addExtraMetaOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addAllDataSegmentOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addGuardianMetaOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UploadDataRequestObjectBuilder extends fb.ObjectBuilder {
  final int? _uploadTimestamp;
  final List<int>? _extraMeta;
  final List<UploadRawDataSegmentObjectBuilder>? _allDataSegment;
  final GuardianMetaObjectBuilder? _guardianMeta;

  UploadDataRequestObjectBuilder({
    int? uploadTimestamp,
    List<int>? extraMeta,
    List<UploadRawDataSegmentObjectBuilder>? allDataSegment,
    GuardianMetaObjectBuilder? guardianMeta,
  })  : _uploadTimestamp = uploadTimestamp,
        _extraMeta = extraMeta,
        _allDataSegment = allDataSegment,
        _guardianMeta = guardianMeta;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? extraMetaOffset = _extraMeta == null ? null : fbBuilder.writeListInt8(_extraMeta!);
    final int? allDataSegmentOffset = _allDataSegment == null
        ? null
        : fbBuilder.writeList(_allDataSegment!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? guardianMetaOffset = _guardianMeta?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addInt64(0, _uploadTimestamp);
    fbBuilder.addOffset(1, extraMetaOffset);
    fbBuilder.addOffset(2, allDataSegmentOffset);
    fbBuilder.addOffset(3, guardianMetaOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class UploadDataResponse {
  UploadDataResponse._(this._bc, this._bcOffset);
  factory UploadDataResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UploadDataResponse> reader = _UploadDataResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  UploadResponseStatus get status =>
      UploadResponseStatus.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<int>? get extraData => const fb.Int8ListReader().vTableGetNullable(_bc, _bcOffset, 8);
  GuardianMeta? get guardianMeta => GuardianMeta.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'UploadDataResponse{status: ${status}, message: ${message}, extraData: ${extraData}, guardianMeta: ${guardianMeta}}';
  }
}

class _UploadDataResponseReader extends fb.TableReader<UploadDataResponse> {
  const _UploadDataResponseReader();

  @override
  UploadDataResponse createObject(fb.BufferContext bc, int offset) => UploadDataResponse._(bc, offset);
}

class UploadDataResponseBuilder {
  UploadDataResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addStatus(UploadResponseStatus? status) {
    fbBuilder.addInt8(0, status?.value);
    return fbBuilder.offset;
  }

  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addExtraDataOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addGuardianMetaOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UploadDataResponseObjectBuilder extends fb.ObjectBuilder {
  final UploadResponseStatus? _status;
  final String? _message;
  final List<int>? _extraData;
  final GuardianMetaObjectBuilder? _guardianMeta;

  UploadDataResponseObjectBuilder({
    UploadResponseStatus? status,
    String? message,
    List<int>? extraData,
    GuardianMetaObjectBuilder? guardianMeta,
  })  : _status = status,
        _message = message,
        _extraData = extraData,
        _guardianMeta = guardianMeta;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset = _message == null ? null : fbBuilder.writeString(_message!);
    final int? extraDataOffset = _extraData == null ? null : fbBuilder.writeListInt8(_extraData!);
    final int? guardianMetaOffset = _guardianMeta?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addInt8(0, _status?.value);
    fbBuilder.addOffset(1, messageOffset);
    fbBuilder.addOffset(2, extraDataOffset);
    fbBuilder.addOffset(3, guardianMetaOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
